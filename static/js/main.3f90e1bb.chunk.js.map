{"version":3,"sources":["images/eu.png","components/Navbar/NavbarItem.js","components/Navbar/Navbar.js","components/SobreMim/SobreMim.js","components/Habilidades/Habilidade.js","components/Habilidades/Habilidades.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavbarItem","className","this","props","title","React","Component","Navbar","SobreMim","src","MinhaFoto","alt","Habilidade","nome","style","flex","porcentagem","Habilidades","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,gC,oNCa5BC,G,sLARX,OACE,yBAAKC,UAAU,eACb,4BAAKC,KAAKC,MAAMC,Y,GAJCC,IAAMC,YCchBC,E,iLAXX,OACE,yBAAKN,UAAU,UACb,kBAAC,EAAD,CAAYG,MAAM,cAClB,kBAAC,EAAD,CAAYA,MAAM,gBAClB,kBAAC,EAAD,CAAYA,MAAM,aAClB,kBAAC,EAAD,CAAYA,MAAM,iB,GAPLC,IAAMC,W,iBCyBZE,G,uLAvBX,OACE,yBAAKP,UAAU,uBAEb,yBAAKA,UAAU,kBACb,yBACEA,UAAU,cACVQ,IAAKC,IACLC,IAAI,gCAKR,yBAAKV,UAAU,mBACb,8J,GAfaI,IAAMC,YCsBdM,G,sLArBX,OACE,yBAAKX,UAAU,wBAEb,6BAAMC,KAAKC,MAAMU,MAGjB,yBAAKZ,UAAU,sBAEb,yBACEA,UAAU,wBACVa,MAAO,CAAEC,KAAMb,KAAKC,MAAMa,eAI5B,yBAAKF,MAAO,CAAEC,KAAM,IAAMb,KAAKC,MAAMa,qB,GAhBtBX,IAAMC,YCchBW,E,iLAXX,OACE,yBAAKhB,UAAU,yBACb,kBAAC,EAAD,CAAYe,YAAa,GAAIH,KAAK,UAClC,kBAAC,EAAD,CAAYG,YAAa,GAAIH,KAAK,WAClC,kBAAC,EAAD,CAAYG,YAAa,EAAGH,KAAK,WACjC,kBAAC,EAAD,CAAYG,YAAa,IAAKH,KAAK,gB,GAPjBR,IAAMC,WCcjBY,MAZf,WACE,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3f90e1bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eu.a170675d.png\";","import React from \"react\";\nimport \"./Navbar.css\";\n\nclass NavbarItem extends React.Component {\n  render() {\n    return (\n      <div className=\"navbar-item\">\n        <h3>{this.props.title}</h3>\n      </div>\n    );\n  }\n}\n\nexport default NavbarItem;\n","import React from \"react\";\nimport NavbarItem from \"./NavbarItem\";\nimport \"./Navbar.css\";\n\nclass Navbar extends React.Component {\n  render() {\n    return (\n      <div className=\"navbar\">\n        <NavbarItem title=\"Sobre mim\" />\n        <NavbarItem title=\"Habilidades\" />\n        <NavbarItem title=\"Projetos\" />\n        <NavbarItem title=\"Contato\" />\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport MinhaFoto from \"../../images/eu.png\";\nimport \"./SobreMim.css\";\n\nclass SobreMim extends React.Component {\n  render() {\n    return (\n      <div className=\"sobre-mim-container\">\n        {/* Aqui vai ser a foto */}\n        <div className=\"foto-container\">\n          <img\n            className=\"foto-perfil\"\n            src={MinhaFoto}\n            alt=\"Foto de perfil de Otacilio\"\n          ></img>\n        </div>\n\n        {/* Aqui vai ser o texto */}\n        <div className=\"texto-container\">\n          <p>\n            Eu sou Otacilio Maia, e estou fazendo um workshop de React.js curto\n            bastante React, Javascript, ChatBots e outras coisas.\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SobreMim;\n","import React from \"react\";\nimport \"./Habilidades.css\";\n\nclass Habilidade extends React.Component {\n  render() {\n    return (\n      <div className=\"habilidade-container\">\n        {/* Nome da habilidade */}\n        <div>{this.props.nome}</div>\n\n        {/* A barrinha em si */}\n        <div className=\"barrinha-container\">\n          {/* Parte preenchida */}\n          <div\n            className=\"preenchimentoBarrinha\"\n            style={{ flex: this.props.porcentagem }}\n          />\n\n          {/* Parte que falta */}\n          <div style={{ flex: 100 - this.props.porcentagem }} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Habilidade;\n","import React from \"react\";\nimport Habilidade from \"./Habilidade\";\nimport \"./Habilidades.css\";\n\nclass Habilidades extends React.Component {\n  render() {\n    return (\n      <div className=\"habilidades-container\">\n        <Habilidade porcentagem={20} nome=\"React\" />\n        <Habilidade porcentagem={50} nome=\"Python\" />\n        <Habilidade porcentagem={0} nome=\"Teste2\" />\n        <Habilidade porcentagem={100} nome=\"Python\" />\n      </div>\n    );\n  }\n}\n\nexport default Habilidades;\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport SobreMim from \"./components/SobreMim/SobreMim\";\nimport Habilidades from \"./components/Habilidades/Habilidades\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navbar></Navbar>\n        <SobreMim></SobreMim>\n        <Habilidades></Habilidades>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}